{"name": "test_send_http[model2]", "status": "broken", "statusDetails": {"message": "AttributeError: 'str' object has no attribute 'items'", "trace": "self = <DiaoApp.case.test_httpRun.Test_case object at 0x000001728E1797E0>\nmodel = <DiaoApp.model.http_model.http_model object at 0x00000172FED947F0>\nkwargs = {}, case_num = 3, last_value_list = []\n\n    @allure.title(\"\")  # 断言完成，更新标题\n    @pytest.mark.parametrize(\"model\", models)\n    def test_send_http(self, model, **kwargs):\n        '''\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        '''\n        # 记录当前用例顺序\n        case_num = self.models.index(model) + 1\n    \n        allure.step(f\"请求URL: {model.url}\")\n        allure.step(f\"请求方式: {model.method}\")\n        allure.step(f\"请求头: {model.headers}\")\n        allure.step(f\"请求数据: {model.data}\")\n        allure.step(f\"依赖数据: {model.dependence_case}\")\n        allure.step(f\"预期数据: {model.assert_value}\")\n    \n        model.headers = comn().get_headers()\n        if model.is_need:  # 判断是否需要抽取的值\n            if self.contentData:\n                print(self.contentData)\n                # 获取登录token并传入header\n                model.headers = comn().get_headers()\n                model.headers[config['token']] = self.contentData[config['res_code']]\n    \n                # 通过切片获取需要取的值，因为code在第一个所以下标从1往后取\n                last_value_list = model.last_value.split(\",\")[1:]\n                for i in range(len(last_value_list)):\n                    value = last_value_list[i]\n                    data_value = self.contentData[value]\n    \n                    # 修改data中需要更新的字段\n                    # 注：case中update_key中的值必须与对应last_value中code后的值以及顺序一致\n                    if model.update_key is not None:\n                        up_key_list = model.update_key.split(\",\")\n                        up_key = up_key_list[i]\n                        model.data = json.loads(model.data)\n                        model.data[up_key] = str(data_value)\n                        model.data = json.dumps(model.data)\n                # for value in model.last_value.split(\",\")[1:]:\n                #     data_value = self.contentData[value]\n    \n                    # 低傲app  不适用传统header传参方式\n                    # if model.req_params_type == 'data':\n                    #     model.data = eval(model.data)\n                    #     model.data.update({token:data_value})\n                    # elif model.req_params_type == 'json':\n                    #     model.headers = eval(model.headers)\n                    #     model.headers.update({token:data_value})\n                    # elif model.req_params_type == 'params':\n    \n                    #  低傲app，需要根据时间戳生成headers\n                    # if value == config['res_code']:\n                    #     model.headers[config['token']] = data_value  # 更新token到headers\n                    # else:\n                    # 更新data中需要获取的字段\n                    # if model.update_key is not None:\n                    #     for up_key in model.update_key.split(\",\"):\n                    #         model.data = json.loads(model.data)\n                    #         model.data[up_key] = data_value\n                    #         model.data = json.dumps(model.data)\n    \n            else:\n                raise Exception(\"期望全局变量中有数据，但是没有拿到数据\")\n    \n        else:\n            #  低傲app，需要根据时间戳生成headers\n            model.headers = comn().get_headers()\n    \n        ch = coreHttp()\n        time.sleep(2)\n        res = ch.send_http(model.method, model.req_params_type, model.url, model.data, model.headers, **kwargs)\n    \n        if res.status_code == 200:\n            # 抽取要传递给下一个接口的数据\n            if model.extract is not None and model.extract != '':\n                # for ex in eval(model.extract):  # eval把字符串转成列表\n    \n                for ex in model.extract.split(','):  # 通过split把需要传递的元素字符串转换成列表进行遍历\n>                   deep_data = Tools().findKey(ex, res.json())\n\ncase\\test_httpRun.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <DiaoApp.utils.otherUtils.Tools.Tools object at 0x000001728E0E7100>\ntarget = 'id'\njson_data = {'code': '', 'data': None, 'list': [{'authorImg': 'https://wm-auction-1.oss-cn-beijing.aliyuncs.com/2022_07/D165901236...658917117519.png', 'authorName': '低傲', 'className': '万安博物馆藏系列', 'id': '515384108906486488', ...}, ...], 'msg': '', ...}\n\n    def findKey(self, target, json_data):\n        queue = [json_data]\n        result = []\n        while len(queue) > 0:\n            data = queue.pop()\n>           for key, value in data.items():\nE           AttributeError: 'str' object has no attribute 'items'\n\nutils\\otherUtils\\Tools.py:14: AttributeError"}, "description": "\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        ", "parameters": [{"name": "model", "value": "<DiaoApp.model.http_model.http_model object at 0x00000172FED947F0>"}], "start": 1661153315132, "stop": 1661153317326, "uuid": "35694d87-a6e2-4551-a16c-6457ba78f908", "historyId": "0c80b40062b357ba5308fc120cd47918", "testCaseId": "ed31b99d3b3aa454dea09452c91e8949", "fullName": "case.test_httpRun.Test_case#test_send_http", "labels": [{"name": "parentSuite", "value": "case"}, {"name": "suite", "value": "test_httpRun"}, {"name": "subSuite", "value": "Test_case"}, {"name": "host", "value": "OS2AQ70MWVFP3P9"}, {"name": "thread", "value": "18804-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.test_httpRun"}]}
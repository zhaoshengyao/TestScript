{"name": "test_send_http[model4]", "status": "broken", "statusDetails": {"message": "ValueError: empty range for randrange() (0, 0, 0)", "trace": "self = <DiaoApp.case.test_httpRun.Test_case object at 0x000001D03FB29750>\nmodel = <DiaoApp.model.http_model.http_model object at 0x000001D0307E08B0>\nkwargs = {}, case_num = 5, last_value_list = ['id'], i = 0, value = 'id'\ndata_value = '576133939571167355', up_key_list = ['id'], up_key = 'id'\n\n    @allure.title(\"\")  # 断言完成，更新标题\n    @pytest.mark.parametrize(\"model\", models)\n    def test_send_http(self, model, **kwargs):\n        '''\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        '''\n        # 记录当前用例顺序\n        case_num = self.models.index(model) + 1\n    \n        allure.step(f\"请求URL: {model.url}\")\n        allure.step(f\"请求方式: {model.method}\")\n        allure.step(f\"请求头: {model.headers}\")\n        allure.step(f\"请求数据: {model.data}\")\n        allure.step(f\"依赖数据: {model.dependence_case}\")\n        allure.step(f\"预期数据: {model.assert_value}\")\n    \n        model.headers = comn().get_headers()\n        if model.is_need:  # 判断是否需要抽取的值\n            if self.contentData:\n                print(self.contentData)\n                # 获取登录token并传入header\n                model.headers = comn().get_headers()\n                model.headers[config['token']] = self.contentData[config['res_code']]\n    \n                # 通过切片获取需要取的值，因为code在第一个所以下标从1往后取\n                last_value_list = model.last_value.split(\",\")[1:]\n                for i in range(len(last_value_list)):\n                    value = last_value_list[i]\n                    data_value = self.contentData[value]\n    \n                    # 修改data中需要更新的字段\n                    # 注：case中update_key中的值必须与对应last_value中code后的值以及顺序一致\n                    if model.update_key is not None:\n                        up_key_list = model.update_key.split(\",\")\n                        up_key = up_key_list[i]\n                        model.data = json.loads(model.data)\n                        model.data[up_key] = str(data_value)\n                        model.data = json.dumps(model.data)\n                # for value in model.last_value.split(\",\")[1:]:\n                #     data_value = self.contentData[value]\n    \n                    # 低傲app  不适用传统header传参方式\n                    # if model.req_params_type == 'data':\n                    #     model.data = eval(model.data)\n                    #     model.data.update({token:data_value})\n                    # elif model.req_params_type == 'json':\n                    #     model.headers = eval(model.headers)\n                    #     model.headers.update({token:data_value})\n                    # elif model.req_params_type == 'params':\n    \n                    #  低傲app，需要根据时间戳生成headers\n                    # if value == config['res_code']:\n                    #     model.headers[config['token']] = data_value  # 更新token到headers\n                    # else:\n                    # 更新data中需要获取的字段\n                    # if model.update_key is not None:\n                    #     for up_key in model.update_key.split(\",\"):\n                    #         model.data = json.loads(model.data)\n                    #         model.data[up_key] = data_value\n                    #         model.data = json.dumps(model.data)\n    \n            else:\n                raise Exception(\"期望全局变量中有数据，但是没有拿到数据\")\n    \n        else:\n            #  低傲app，需要根据时间戳生成headers\n            model.headers = comn().get_headers()\n    \n        ch = coreHttp()\n        time.sleep(2)\n        res = ch.send_http(model.method, model.req_params_type, model.url, model.data, model.headers, **kwargs)\n    \n        if res.status_code == 200:\n            # 抽取要传递给下一个接口的数据\n            if model.extract is not None and model.extract != '':\n                # for ex in eval(model.extract):  # eval把字符串转成列表\n    \n                for ex in model.extract.split(','):  # 通过split把需要传递的元素字符串转换成列表进行遍历\n                    deep_data = Tools().findKey(ex, res.json())\n                    # if deep_data:\n                    #     self.contentData.update({ex: deep_data[0]})\n>                   x = random.randint(0, len(deep_data)-1)\n\ncase\\test_httpRun.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python310\\lib\\random.py:370: in randint\n    return self.randrange(a, b+1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <random.Random object at 0x000001D02DE933D0>, start = 0, stop = 0\nstep = 1\n\n    def randrange(self, start, stop=None, step=_ONE):\n        \"\"\"Choose a random item from range(start, stop[, step]).\n    \n        This fixes the problem with randint() which includes the\n        endpoint; in Python this is usually not what you want.\n    \n        \"\"\"\n    \n        # This code is a bit messy to make it fast for the\n        # common case while still doing adequate error checking.\n        try:\n            istart = _index(start)\n        except TypeError:\n            istart = int(start)\n            if istart != start:\n                _warn('randrange() will raise TypeError in the future',\n                      DeprecationWarning, 2)\n                raise ValueError(\"non-integer arg 1 for randrange()\")\n            _warn('non-integer arguments to randrange() have been deprecated '\n                  'since Python 3.10 and will be removed in a subsequent '\n                  'version',\n                  DeprecationWarning, 2)\n        if stop is None:\n            # We don't check for \"step != 1\" because it hasn't been\n            # type checked and converted to an integer yet.\n            if step is not _ONE:\n                raise TypeError('Missing a non-None stop argument')\n            if istart > 0:\n                return self._randbelow(istart)\n            raise ValueError(\"empty range for randrange()\")\n    \n        # stop argument supplied.\n        try:\n            istop = _index(stop)\n        except TypeError:\n            istop = int(stop)\n            if istop != stop:\n                _warn('randrange() will raise TypeError in the future',\n                      DeprecationWarning, 2)\n                raise ValueError(\"non-integer stop for randrange()\")\n            _warn('non-integer arguments to randrange() have been deprecated '\n                  'since Python 3.10 and will be removed in a subsequent '\n                  'version',\n                  DeprecationWarning, 2)\n        width = istop - istart\n        try:\n            istep = _index(step)\n        except TypeError:\n            istep = int(step)\n            if istep != step:\n                _warn('randrange() will raise TypeError in the future',\n                      DeprecationWarning, 2)\n                raise ValueError(\"non-integer step for randrange()\")\n            _warn('non-integer arguments to randrange() have been deprecated '\n                  'since Python 3.10 and will be removed in a subsequent '\n                  'version',\n                  DeprecationWarning, 2)\n        # Fast path.\n        if istep == 1:\n            if width > 0:\n                return istart + self._randbelow(width)\n>           raise ValueError(\"empty range for randrange() (%d, %d, %d)\" % (istart, istop, width))\nE           ValueError: empty range for randrange() (0, 0, 0)\n\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python310\\lib\\random.py:353: ValueError"}, "description": "\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        ", "parameters": [{"name": "model", "value": "<DiaoApp.model.http_model.http_model object at 0x000001D0307E08B0>"}], "start": 1661154892307, "stop": 1661154894428, "uuid": "4a917d70-f820-4757-a1cb-654f53ba637f", "historyId": "01d421878f5e728eaa3dfc68c80c595d", "testCaseId": "ed31b99d3b3aa454dea09452c91e8949", "fullName": "case.test_httpRun.Test_case#test_send_http", "labels": [{"name": "parentSuite", "value": "case"}, {"name": "suite", "value": "test_httpRun"}, {"name": "subSuite", "value": "Test_case"}, {"name": "host", "value": "OS2AQ70MWVFP3P9"}, {"name": "thread", "value": "29892-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.test_httpRun"}]}
{
  "uid" : "7cdf57f5e4e83e14",
  "name" : "搜索存在的商品",
  "fullName" : "case.test_httpRun.Test_case#test_send_http",
  "historyId" : "a2f8de0a636c83387662b5a549a93c8e",
  "time" : {
    "start" : 1658998403118,
    "stop" : 1658998403202,
    "duration" : 84
  },
  "description" : "\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        ",
  "descriptionHtml" : "<pre><code>    :model:传入的数据对象\n    :param kwargs:\n    :return:\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert '返回数据格式与提取格式不一致，请检查返回数据是否正确！' == 2\n  +'返回数据格式与提取格式不一致，请检查返回数据是否正确！'\n  -2",
  "statusTrace" : "self = <华测.API.httpFrame.case.test_httpRun.Test_case object at 0x00000177A1F534F0>\nmodel = <model.http_model.http_model object at 0x00000177917C2C40>, kwargs = {}\ncase_num = 9, value = 'code'\ndata_value = '86AF2DC047BB1C1853DA37D4486B24DD6DA5561CA1AB01D67F68DD2045B607A03545D66CECC174585F1652F4C2517F7FF2893C605D2169C63AD2006BF4D0376A65216A7347299E18C4316C245BFF62B6'\nch = <utils.httpUtils.coreHttp.coreHttp object at 0x00000177A1F0D850>\nres = <Response [200]>\n\n    @allure.title(\"\") # 断言完成，更新标题\n    @pytest.mark.parametrize(\"model\",models)\n    def test_send_http(self,model,**kwargs):\n        '''\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        '''\n        #记录当前用例顺序\n        case_num = self.models.index(model)+1\n    \n        allure.step(f\"请求URL: {model.url}\")\n        allure.step(f\"请求方式: {model.method}\")\n        allure.step(f\"请求头: {model.headers}\")\n        allure.step(f\"请求数据: {model.data}\")\n        allure.step(f\"依赖数据: {model.dependence_case}\")\n        allure.step(f\"预期数据: {model.assert_value}\")\n        if model.is_need: #判断是否需要抽取的值\n            if self.contentData:\n                for value in model.last_value.split(\",\"):\n                    data_value = self.contentData[value]\n    \n                    # 低傲app  不适用传统header传参方式\n                    # if model.req_params_type == 'data':\n                    #     model.data = eval(model.data)\n                    #     model.data.update({token:data_value})\n                    # elif model.req_params_type == 'json':\n                    #     model.headers = eval(model.headers)\n                    #     model.headers.update({token:data_value})\n                    # elif model.req_params_type == 'params':\n    \n                    #  低傲app，需要根据时间戳生成headers\n                    if value == config['res_code']:\n                        model.headers = comn().get_headers()\n                        model.headers[config['token']] = data_value # 更新token到headers\n    \n                    else:\n                        model.headers = comn().get_headers()\n    \n            else:\n                raise Exception(\"期望全局变量中有数据，但是没有拿到数据\")\n    \n        else:\n            #  低傲app，需要根据时间戳生成headers\n            model.headers = comn().get_headers()\n    \n        ch = coreHttp()\n    \n        res = ch.send_http(model.method,model.req_params_type, model.url, model.data, model.headers, **kwargs)\n    \n        if res.status_code == 200:\n            # 抽取要传递给下一个接口的数据\n            if model.extract != None and model.extract != '':\n                # for ex in eval(model.extract):  # eval把字符串转成列表\n                for ex in model.extract.split(','):  # 通过split把需要传递的元素字符串转换成列表进行遍历\n                    if ex in res.json().keys():\n                        res_data = jsonpath.jsonpath(res.json(), '$..' + ex)\n                        self.contentData.update({ex: res_data[0]})\n            # 通过长度断言\n            if model.assert_data.startswith('len'):\n                asserData = [len(jsonpath.jsonpath(res.json(), '$..' + model.assert_data.split('(')[1][:-1])[0])]\n            else:\n                data_assert = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n                if str(data_assert) == 'False': #处理空值，防止报错\n                    asserData = ['返回数据格式与提取格式不一致，请检查返回数据是否正确！']\n                else:\n                    asserData = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n    \n            # 进行断言\n            try:\n                if model.assert_options == \"相等\":\n                    assert asserData[0] == model.assert_value\n                elif model.assert_options == \"包含\":\n                    assert asserData\n                elif model.assert_options == \"大于\":\n                    assert asserData[0] < model.assert_value\n                elif model.assert_options == \"小于\":\n                    assert asserData[0] > model.assert_value\n                else:\n                    assert asserData[0] != model.assert_value\n    \n                allure.dynamic.title(model.test_title) # 断言完成，更新allure标题\n    \n                # 断言完成，填写Excel用例中的数据\n                self.write_reslut(model, \"PASS\")\n                kwargs_data = {\n                    \"res\": res,\n                    \"asserData\": asserData,\n                    \"case_num\": case_num,\n                    \"model\": model\n                }\n    \n                self.check_params(**kwargs_data)\n    \n            except Exception as e:\n                allure.dynamic.title(model.test_title) # 断言完成，更新标题\n                self.write_reslut(model, \"FAILD\")\n                logger.error(e)\n                kwargs_data = {\n                    \"res\": res,\n                    \"asserData\": asserData,\n                    \"case_num\": case_num,\n                    \"model\": model\n                }\n                self.check_params(**kwargs_data)\n>               raise e  # 保持异常状态，pytest判定为失败\n\ncase\\test_httpRun.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <华测.API.httpFrame.case.test_httpRun.Test_case object at 0x00000177A1F534F0>\nmodel = <model.http_model.http_model object at 0x00000177917C2C40>, kwargs = {}\ncase_num = 9, value = 'code'\ndata_value = '86AF2DC047BB1C1853DA37D4486B24DD6DA5561CA1AB01D67F68DD2045B607A03545D66CECC174585F1652F4C2517F7FF2893C605D2169C63AD2006BF4D0376A65216A7347299E18C4316C245BFF62B6'\nch = <utils.httpUtils.coreHttp.coreHttp object at 0x00000177A1F0D850>\nres = <Response [200]>\n\n    @allure.title(\"\") # 断言完成，更新标题\n    @pytest.mark.parametrize(\"model\",models)\n    def test_send_http(self,model,**kwargs):\n        '''\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        '''\n        #记录当前用例顺序\n        case_num = self.models.index(model)+1\n    \n        allure.step(f\"请求URL: {model.url}\")\n        allure.step(f\"请求方式: {model.method}\")\n        allure.step(f\"请求头: {model.headers}\")\n        allure.step(f\"请求数据: {model.data}\")\n        allure.step(f\"依赖数据: {model.dependence_case}\")\n        allure.step(f\"预期数据: {model.assert_value}\")\n        if model.is_need: #判断是否需要抽取的值\n            if self.contentData:\n                for value in model.last_value.split(\",\"):\n                    data_value = self.contentData[value]\n    \n                    # 低傲app  不适用传统header传参方式\n                    # if model.req_params_type == 'data':\n                    #     model.data = eval(model.data)\n                    #     model.data.update({token:data_value})\n                    # elif model.req_params_type == 'json':\n                    #     model.headers = eval(model.headers)\n                    #     model.headers.update({token:data_value})\n                    # elif model.req_params_type == 'params':\n    \n                    #  低傲app，需要根据时间戳生成headers\n                    if value == config['res_code']:\n                        model.headers = comn().get_headers()\n                        model.headers[config['token']] = data_value # 更新token到headers\n    \n                    else:\n                        model.headers = comn().get_headers()\n    \n            else:\n                raise Exception(\"期望全局变量中有数据，但是没有拿到数据\")\n    \n        else:\n            #  低傲app，需要根据时间戳生成headers\n            model.headers = comn().get_headers()\n    \n        ch = coreHttp()\n    \n        res = ch.send_http(model.method,model.req_params_type, model.url, model.data, model.headers, **kwargs)\n    \n        if res.status_code == 200:\n            # 抽取要传递给下一个接口的数据\n            if model.extract != None and model.extract != '':\n                # for ex in eval(model.extract):  # eval把字符串转成列表\n                for ex in model.extract.split(','):  # 通过split把需要传递的元素字符串转换成列表进行遍历\n                    if ex in res.json().keys():\n                        res_data = jsonpath.jsonpath(res.json(), '$..' + ex)\n                        self.contentData.update({ex: res_data[0]})\n            # 通过长度断言\n            if model.assert_data.startswith('len'):\n                asserData = [len(jsonpath.jsonpath(res.json(), '$..' + model.assert_data.split('(')[1][:-1])[0])]\n            else:\n                data_assert = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n                if str(data_assert) == 'False': #处理空值，防止报错\n                    asserData = ['返回数据格式与提取格式不一致，请检查返回数据是否正确！']\n                else:\n                    asserData = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n    \n            # 进行断言\n            try:\n                if model.assert_options == \"相等\":\n>                   assert asserData[0] == model.assert_value\nE                   AssertionError: assert '返回数据格式与提取格式不一致，请检查返回数据是否正确！' == 2\nE                     +'返回数据格式与提取格式不一致，请检查返回数据是否正确！'\nE                     -2\n\ncase\\test_httpRun.py:108: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1658998402101,
      "stop" : 1658998402160,
      "duration" : 59
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "xunit_setup_class_fixture_Test_case",
    "time" : {
      "start" : 1658998402160,
      "stop" : 1658998402160,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert '返回数据格式与提取格式不一致，请检查返回数据是否正确！' == 2\n  +'返回数据格式与提取格式不一致，请检查返回数据是否正确！'\n  -2",
    "statusTrace" : "self = <华测.API.httpFrame.case.test_httpRun.Test_case object at 0x00000177A1F534F0>\nmodel = <model.http_model.http_model object at 0x00000177917C2C40>, kwargs = {}\ncase_num = 9, value = 'code'\ndata_value = '86AF2DC047BB1C1853DA37D4486B24DD6DA5561CA1AB01D67F68DD2045B607A03545D66CECC174585F1652F4C2517F7FF2893C605D2169C63AD2006BF4D0376A65216A7347299E18C4316C245BFF62B6'\nch = <utils.httpUtils.coreHttp.coreHttp object at 0x00000177A1F0D850>\nres = <Response [200]>\n\n    @allure.title(\"\") # 断言完成，更新标题\n    @pytest.mark.parametrize(\"model\",models)\n    def test_send_http(self,model,**kwargs):\n        '''\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        '''\n        #记录当前用例顺序\n        case_num = self.models.index(model)+1\n    \n        allure.step(f\"请求URL: {model.url}\")\n        allure.step(f\"请求方式: {model.method}\")\n        allure.step(f\"请求头: {model.headers}\")\n        allure.step(f\"请求数据: {model.data}\")\n        allure.step(f\"依赖数据: {model.dependence_case}\")\n        allure.step(f\"预期数据: {model.assert_value}\")\n        if model.is_need: #判断是否需要抽取的值\n            if self.contentData:\n                for value in model.last_value.split(\",\"):\n                    data_value = self.contentData[value]\n    \n                    # 低傲app  不适用传统header传参方式\n                    # if model.req_params_type == 'data':\n                    #     model.data = eval(model.data)\n                    #     model.data.update({token:data_value})\n                    # elif model.req_params_type == 'json':\n                    #     model.headers = eval(model.headers)\n                    #     model.headers.update({token:data_value})\n                    # elif model.req_params_type == 'params':\n    \n                    #  低傲app，需要根据时间戳生成headers\n                    if value == config['res_code']:\n                        model.headers = comn().get_headers()\n                        model.headers[config['token']] = data_value # 更新token到headers\n    \n                    else:\n                        model.headers = comn().get_headers()\n    \n            else:\n                raise Exception(\"期望全局变量中有数据，但是没有拿到数据\")\n    \n        else:\n            #  低傲app，需要根据时间戳生成headers\n            model.headers = comn().get_headers()\n    \n        ch = coreHttp()\n    \n        res = ch.send_http(model.method,model.req_params_type, model.url, model.data, model.headers, **kwargs)\n    \n        if res.status_code == 200:\n            # 抽取要传递给下一个接口的数据\n            if model.extract != None and model.extract != '':\n                # for ex in eval(model.extract):  # eval把字符串转成列表\n                for ex in model.extract.split(','):  # 通过split把需要传递的元素字符串转换成列表进行遍历\n                    if ex in res.json().keys():\n                        res_data = jsonpath.jsonpath(res.json(), '$..' + ex)\n                        self.contentData.update({ex: res_data[0]})\n            # 通过长度断言\n            if model.assert_data.startswith('len'):\n                asserData = [len(jsonpath.jsonpath(res.json(), '$..' + model.assert_data.split('(')[1][:-1])[0])]\n            else:\n                data_assert = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n                if str(data_assert) == 'False': #处理空值，防止报错\n                    asserData = ['返回数据格式与提取格式不一致，请检查返回数据是否正确！']\n                else:\n                    asserData = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n    \n            # 进行断言\n            try:\n                if model.assert_options == \"相等\":\n                    assert asserData[0] == model.assert_value\n                elif model.assert_options == \"包含\":\n                    assert asserData\n                elif model.assert_options == \"大于\":\n                    assert asserData[0] < model.assert_value\n                elif model.assert_options == \"小于\":\n                    assert asserData[0] > model.assert_value\n                else:\n                    assert asserData[0] != model.assert_value\n    \n                allure.dynamic.title(model.test_title) # 断言完成，更新allure标题\n    \n                # 断言完成，填写Excel用例中的数据\n                self.write_reslut(model, \"PASS\")\n                kwargs_data = {\n                    \"res\": res,\n                    \"asserData\": asserData,\n                    \"case_num\": case_num,\n                    \"model\": model\n                }\n    \n                self.check_params(**kwargs_data)\n    \n            except Exception as e:\n                allure.dynamic.title(model.test_title) # 断言完成，更新标题\n                self.write_reslut(model, \"FAILD\")\n                logger.error(e)\n                kwargs_data = {\n                    \"res\": res,\n                    \"asserData\": asserData,\n                    \"case_num\": case_num,\n                    \"model\": model\n                }\n                self.check_params(**kwargs_data)\n>               raise e  # 保持异常状态，pytest判定为失败\n\ncase\\test_httpRun.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <华测.API.httpFrame.case.test_httpRun.Test_case object at 0x00000177A1F534F0>\nmodel = <model.http_model.http_model object at 0x00000177917C2C40>, kwargs = {}\ncase_num = 9, value = 'code'\ndata_value = '86AF2DC047BB1C1853DA37D4486B24DD6DA5561CA1AB01D67F68DD2045B607A03545D66CECC174585F1652F4C2517F7FF2893C605D2169C63AD2006BF4D0376A65216A7347299E18C4316C245BFF62B6'\nch = <utils.httpUtils.coreHttp.coreHttp object at 0x00000177A1F0D850>\nres = <Response [200]>\n\n    @allure.title(\"\") # 断言完成，更新标题\n    @pytest.mark.parametrize(\"model\",models)\n    def test_send_http(self,model,**kwargs):\n        '''\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        '''\n        #记录当前用例顺序\n        case_num = self.models.index(model)+1\n    \n        allure.step(f\"请求URL: {model.url}\")\n        allure.step(f\"请求方式: {model.method}\")\n        allure.step(f\"请求头: {model.headers}\")\n        allure.step(f\"请求数据: {model.data}\")\n        allure.step(f\"依赖数据: {model.dependence_case}\")\n        allure.step(f\"预期数据: {model.assert_value}\")\n        if model.is_need: #判断是否需要抽取的值\n            if self.contentData:\n                for value in model.last_value.split(\",\"):\n                    data_value = self.contentData[value]\n    \n                    # 低傲app  不适用传统header传参方式\n                    # if model.req_params_type == 'data':\n                    #     model.data = eval(model.data)\n                    #     model.data.update({token:data_value})\n                    # elif model.req_params_type == 'json':\n                    #     model.headers = eval(model.headers)\n                    #     model.headers.update({token:data_value})\n                    # elif model.req_params_type == 'params':\n    \n                    #  低傲app，需要根据时间戳生成headers\n                    if value == config['res_code']:\n                        model.headers = comn().get_headers()\n                        model.headers[config['token']] = data_value # 更新token到headers\n    \n                    else:\n                        model.headers = comn().get_headers()\n    \n            else:\n                raise Exception(\"期望全局变量中有数据，但是没有拿到数据\")\n    \n        else:\n            #  低傲app，需要根据时间戳生成headers\n            model.headers = comn().get_headers()\n    \n        ch = coreHttp()\n    \n        res = ch.send_http(model.method,model.req_params_type, model.url, model.data, model.headers, **kwargs)\n    \n        if res.status_code == 200:\n            # 抽取要传递给下一个接口的数据\n            if model.extract != None and model.extract != '':\n                # for ex in eval(model.extract):  # eval把字符串转成列表\n                for ex in model.extract.split(','):  # 通过split把需要传递的元素字符串转换成列表进行遍历\n                    if ex in res.json().keys():\n                        res_data = jsonpath.jsonpath(res.json(), '$..' + ex)\n                        self.contentData.update({ex: res_data[0]})\n            # 通过长度断言\n            if model.assert_data.startswith('len'):\n                asserData = [len(jsonpath.jsonpath(res.json(), '$..' + model.assert_data.split('(')[1][:-1])[0])]\n            else:\n                data_assert = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n                if str(data_assert) == 'False': #处理空值，防止报错\n                    asserData = ['返回数据格式与提取格式不一致，请检查返回数据是否正确！']\n                else:\n                    asserData = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n    \n            # 进行断言\n            try:\n                if model.assert_options == \"相等\":\n>                   assert asserData[0] == model.assert_value\nE                   AssertionError: assert '返回数据格式与提取格式不一致，请检查返回数据是否正确！' == 2\nE                     +'返回数据格式与提取格式不一致，请检查返回数据是否正确！'\nE                     -2\n\ncase\\test_httpRun.py:108: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bea32461811c3e0b",
      "name" : "log",
      "source" : "bea32461811c3e0b.txt",
      "type" : "text/plain",
      "size" : 1325
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "xunit_setup_class_fixture_Test_case::0",
    "time" : {
      "start" : 1658998403297,
      "stop" : 1658998403319,
      "duration" : 22
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "case"
  }, {
    "name" : "suite",
    "value" : "test_httpRun"
  }, {
    "name" : "subSuite",
    "value" : "Test_case"
  }, {
    "name" : "host",
    "value" : "DESKTOP-0SNQ08G"
  }, {
    "name" : "thread",
    "value" : "8660-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "case.test_httpRun"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "model",
    "value" : "<model.http_model.http_model object at 0x00000177917C2C40>"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "7cdf57f5e4e83e14.json",
  "parameterValues" : [ "<model.http_model.http_model object at 0x00000177917C2C40>" ]
}
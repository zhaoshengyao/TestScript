{"name": "账号为空，登录失败", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <DiaoApp.case.test_httpRun.Test_case object at 0x000001AF9B6F97E0>\nmodel = <model.http_model.http_model object at 0x000001AF9B6FA5C0>, kwargs = {}\ncase_num = 5\nch = <DiaoApp.utils.httpUtils.coreHttp.coreHttp object at 0x000001AF9B772470>\nres = <Response [400]>\n\n    @allure.title(\"\") # 断言完成，更新标题\n    @pytest.mark.parametrize(\"model\",models)\n    def test_send_http(self,model,**kwargs):\n        '''\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        '''\n        #记录当前用例顺序\n        case_num = self.models.index(model)+1\n    \n        allure.step(f\"请求URL: {model.url}\")\n        allure.step(f\"请求方式: {model.method}\")\n        allure.step(f\"请求头: {model.headers}\")\n        allure.step(f\"请求数据: {model.data}\")\n        allure.step(f\"依赖数据: {model.dependence_case}\")\n        allure.step(f\"预期数据: {model.assert_value}\")\n        if model.is_need: #判断是否需要抽取的值\n            if self.contentData:\n                for value in model.last_value.split(\",\"):\n                    data_value = self.contentData[value]\n    \n                    # 低傲app  不适用传统header传参方式\n                    # if model.req_params_type == 'data':\n                    #     model.data = eval(model.data)\n                    #     model.data.update({token:data_value})\n                    # elif model.req_params_type == 'json':\n                    #     model.headers = eval(model.headers)\n                    #     model.headers.update({token:data_value})\n                    # elif model.req_params_type == 'params':\n    \n                    #  低傲app，需要根据时间戳生成headers\n                    if value == config['res_code']:\n                        model.headers = comn().get_headers()\n                        model.headers[config['token']] = data_value # 更新token到headers\n    \n                    else:\n                        model.headers = comn().get_headers()\n    \n            else:\n                raise Exception(\"期望全局变量中有数据，但是没有拿到数据\")\n    \n        else:\n            #  低傲app，需要根据时间戳生成headers\n            model.headers = comn().get_headers()\n    \n        ch = coreHttp()\n    \n        res = ch.send_http(model.method,model.req_params_type, model.url, model.data, model.headers, **kwargs)\n    \n        if res.status_code == 200:\n            # 抽取要传递给下一个接口的数据\n            if model.extract != None and model.extract != '':\n                # for ex in eval(model.extract):  # eval把字符串转成列表\n                for ex in model.extract.split(','):  # 通过split把需要传递的元素字符串转换成列表进行遍历\n                    if ex in res.json().keys():\n                        res_data = jsonpath.jsonpath(res.json(), '$..' + ex)\n                        self.contentData.update({ex: res_data[0]})\n            # 通过长度断言\n            if model.assert_data.startswith('len'):\n                asserData = [len(jsonpath.jsonpath(res.json(), '$..' + model.assert_data.split('(')[1][:-1])[0])]\n            else:\n                data_assert = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n                if str(data_assert) == 'False': #处理空值，防止报错\n                    asserData = ['返回数据格式与提取格式不一致，请检查返回数据是否正确！']\n                else:\n                    asserData = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n    \n            # 进行断言\n            try:\n                if model.assert_options == \"相等\":\n                    assert asserData[0] == model.assert_value\n                elif model.assert_options == \"包含\":\n                    assert asserData\n                elif model.assert_options == \"大于\":\n                    assert asserData[0] < model.assert_value\n                elif model.assert_options == \"小于\":\n                    assert asserData[0] > model.assert_value\n                else:\n                    assert asserData[0] != model.assert_value\n    \n                allure.dynamic.title(model.test_title) # 断言完成，更新allure标题\n    \n                # 断言完成，填写Excel用例中的数据\n                self.write_reslut(model, \"PASS\")\n                kwargs_data = {\n                    \"res\": res,\n                    \"asserData\": asserData,\n                    \"case_num\": case_num,\n                    \"model\": model\n                }\n    \n                self.check_params(**kwargs_data)\n    \n            except Exception as e:\n                allure.dynamic.title(model.test_title) # 断言完成，更新标题\n                self.write_reslut(model, \"FAILD\")\n                logger.error(e)\n                kwargs_data = {\n                    \"res\": res,\n                    \"asserData\": asserData,\n                    \"case_num\": case_num,\n                    \"model\": model\n                }\n                self.check_params(**kwargs_data)\n                raise e  # 保持异常状态，pytest判定为失败\n    \n        else:\n            asserData = res.json()\n    \n            try:\n                assert res.status_code == 200\n            except Exception as e:\n                allure.dynamic.title(model.test_title)\n                self.write_reslut(model, \"FAILD\")\n                logger.error(e)\n                kwargs_data = {\n                    \"res\":res,\n                    \"asserData\":asserData,\n                    \"case_num\":case_num,\n                    \"model\":model\n                }\n                self.check_params(**kwargs_data)\n>               raise e\n\ncase\\test_httpRun.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <DiaoApp.case.test_httpRun.Test_case object at 0x000001AF9B6F97E0>\nmodel = <model.http_model.http_model object at 0x000001AF9B6FA5C0>, kwargs = {}\ncase_num = 5\nch = <DiaoApp.utils.httpUtils.coreHttp.coreHttp object at 0x000001AF9B772470>\nres = <Response [400]>\n\n    @allure.title(\"\") # 断言完成，更新标题\n    @pytest.mark.parametrize(\"model\",models)\n    def test_send_http(self,model,**kwargs):\n        '''\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        '''\n        #记录当前用例顺序\n        case_num = self.models.index(model)+1\n    \n        allure.step(f\"请求URL: {model.url}\")\n        allure.step(f\"请求方式: {model.method}\")\n        allure.step(f\"请求头: {model.headers}\")\n        allure.step(f\"请求数据: {model.data}\")\n        allure.step(f\"依赖数据: {model.dependence_case}\")\n        allure.step(f\"预期数据: {model.assert_value}\")\n        if model.is_need: #判断是否需要抽取的值\n            if self.contentData:\n                for value in model.last_value.split(\",\"):\n                    data_value = self.contentData[value]\n    \n                    # 低傲app  不适用传统header传参方式\n                    # if model.req_params_type == 'data':\n                    #     model.data = eval(model.data)\n                    #     model.data.update({token:data_value})\n                    # elif model.req_params_type == 'json':\n                    #     model.headers = eval(model.headers)\n                    #     model.headers.update({token:data_value})\n                    # elif model.req_params_type == 'params':\n    \n                    #  低傲app，需要根据时间戳生成headers\n                    if value == config['res_code']:\n                        model.headers = comn().get_headers()\n                        model.headers[config['token']] = data_value # 更新token到headers\n    \n                    else:\n                        model.headers = comn().get_headers()\n    \n            else:\n                raise Exception(\"期望全局变量中有数据，但是没有拿到数据\")\n    \n        else:\n            #  低傲app，需要根据时间戳生成headers\n            model.headers = comn().get_headers()\n    \n        ch = coreHttp()\n    \n        res = ch.send_http(model.method,model.req_params_type, model.url, model.data, model.headers, **kwargs)\n    \n        if res.status_code == 200:\n            # 抽取要传递给下一个接口的数据\n            if model.extract != None and model.extract != '':\n                # for ex in eval(model.extract):  # eval把字符串转成列表\n                for ex in model.extract.split(','):  # 通过split把需要传递的元素字符串转换成列表进行遍历\n                    if ex in res.json().keys():\n                        res_data = jsonpath.jsonpath(res.json(), '$..' + ex)\n                        self.contentData.update({ex: res_data[0]})\n            # 通过长度断言\n            if model.assert_data.startswith('len'):\n                asserData = [len(jsonpath.jsonpath(res.json(), '$..' + model.assert_data.split('(')[1][:-1])[0])]\n            else:\n                data_assert = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n                if str(data_assert) == 'False': #处理空值，防止报错\n                    asserData = ['返回数据格式与提取格式不一致，请检查返回数据是否正确！']\n                else:\n                    asserData = jsonpath.jsonpath(res.json(), '$..' + model.assert_data)\n    \n            # 进行断言\n            try:\n                if model.assert_options == \"相等\":\n                    assert asserData[0] == model.assert_value\n                elif model.assert_options == \"包含\":\n                    assert asserData\n                elif model.assert_options == \"大于\":\n                    assert asserData[0] < model.assert_value\n                elif model.assert_options == \"小于\":\n                    assert asserData[0] > model.assert_value\n                else:\n                    assert asserData[0] != model.assert_value\n    \n                allure.dynamic.title(model.test_title) # 断言完成，更新allure标题\n    \n                # 断言完成，填写Excel用例中的数据\n                self.write_reslut(model, \"PASS\")\n                kwargs_data = {\n                    \"res\": res,\n                    \"asserData\": asserData,\n                    \"case_num\": case_num,\n                    \"model\": model\n                }\n    \n                self.check_params(**kwargs_data)\n    \n            except Exception as e:\n                allure.dynamic.title(model.test_title) # 断言完成，更新标题\n                self.write_reslut(model, \"FAILD\")\n                logger.error(e)\n                kwargs_data = {\n                    \"res\": res,\n                    \"asserData\": asserData,\n                    \"case_num\": case_num,\n                    \"model\": model\n                }\n                self.check_params(**kwargs_data)\n                raise e  # 保持异常状态，pytest判定为失败\n    \n        else:\n            asserData = res.json()\n    \n            try:\n>               assert res.status_code == 200\nE               assert 400 == 200\nE                +  where 400 = <Response [400]>.status_code\n\ncase\\test_httpRun.py:148: AssertionError"}, "description": "\n        :model:传入的数据对象\n        :param kwargs:\n        :return:\n        ", "attachments": [{"name": "log", "source": "6414297c-091f-48ce-81be-a463745da079-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "model", "value": "<model.http_model.http_model object at 0x000001AF9B6FA5C0>"}], "start": 1660615538565, "stop": 1660615538647, "uuid": "ac068ae1-0212-47d8-93a2-4feadb4c4c32", "historyId": "01d421878f5e728eaa3dfc68c80c595d", "testCaseId": "ed31b99d3b3aa454dea09452c91e8949", "fullName": "case.test_httpRun.Test_case#test_send_http", "labels": [{"name": "parentSuite", "value": "case"}, {"name": "suite", "value": "test_httpRun"}, {"name": "subSuite", "value": "Test_case"}, {"name": "host", "value": "OS2AQ70MWVFP3P9"}, {"name": "thread", "value": "6484-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.test_httpRun"}]}